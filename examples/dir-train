#!/usr/bin/env lua5.1
-- -*- mode: lua -*-

-- self-contained script to train on corpora that are in directories labelled by class



function table.randomized(l)
  u = { }
  local n = #l
  for i = 1, n do
    u[i] = l[i]
  end
  for i = 1, n do
    j = math.random(n)
    u[i], u[j] = u[j], u[i]
  end
  return u
end

----------------------------------------------------------------

local pname = 'osbf3'

local function submod(x) return require (pname .. '.' .. x) end

local osbf = require (pname)
local util = submod 'util'
local commands = submod 'commands'
local msg = submod 'msg'
local log = submod 'log'
local core = submod 'core'

util.progname = arg[0] or 'dir-train'

osbf.options.register { long = 'trace', usage = ' # stack trace on error',
                   help = [[
  --trace
      Don't recover from errors; give a stack trace instead
]] }

osbf.options.register { long = 'init', usage = ' # initialize new -udir' }

local ok, opts, args = pcall(osbf.options.parse, arg)
if not ok then
  util.die(opts, '\n')
end
if opts.trace then
  pcall = function(f, ...) return true, f(...) end
end
local existing_dir = opts.udir
if not existing_dir then
  local test_dir = '/tmp/osbf-dir-train'
  os.execute('/bin/rm -rf ' .. test_dir)
  os.execute('/bin/mkdir ' .. test_dir)
  opts.udir = test_dir
end

osbf.init(opts, opts.init or not existing_dir)
if opts.init or not existing_dir then
  io.stderr:write 'Initializing...\n'
  if opts.config then
    os.execute(string.format("cp '%s' %s/config.lua", opts.config, opts.udir))
  end
  commands.init('nr@localhost', 94321, 'buckets')
else
  io.stderr:write('Existing dir ', tostring(existing_dir), '\n')
end


local function lines_of_file(f)
  local l = { }
  for line in f:lines() do l[#l+1] = line end
  return l
end

local function train_file(file)
  local class = string.match(file, '([^/]+)/[^/]+$')
  assert(class, 'could not find class in filename ' .. file)
  local m = msg.of_file(file)
  local ok, comment = pcall(commands.learn_msg, m, class, true)
  if ok then
    io.stdout:write(file, ': ', comment, '\n')
    log.lua('dir_train', { crc32 = core.crc32(msg.to_orig_string(m)),
                           class = class, comment = comment, file = file })
  else
    io.stderr:write(file, ': ', comment, '\n')
  end
end

args = table.randomized(args)
for _, file in ipairs(args) do
  if file == '-' then
    for _, file in ipairs(table.randomized(lines_of_file(io.stdin))) do
      train_file(file)
    end
  else
    train_file(file)
  end
end
