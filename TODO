The parsing in the msg module needs to be fixed.
When the string is not in the correct format:

  msg.of_string should cause an assertion failure

  msg.of_any should return nil, error_message




Here are some additional operations that would be useful to expose
directly:

  -- add a message to the cache and return its sfid
  -- (does it need additional arguments to generate an sfid?)
  function util.add_to_cache(msg, status)
    assert(not(is_sfid(msg)))
    local sfid = generate_sfid(msg) -- not sure how this works
    local fn = cachefilename(sfid, status or 'unlearned')
    local f, msg = io.open(fn, 'w')
    if f then
      f:write(util.string_of_msg(msg))
      f:close()
      return sfid
    else
      return nil, fn .. ': ' .. msg
    end
  end


  function util.extract_sfid_from_header(msg)
    -- gets sfid out of a reply, if any
  end

  function util.parse_command(string)
    -- string must contain a good (non-default) password
    returns nil if no command, or otherwise returns cmd, { arg1, arg2, ... }
  end    

----------------------------------------------------------------

Here are some higher-level commands

  function commands.classify(msg)
    ...
    return sfid_tag, pR
  end

  function commands.learn(sfid, classification)
    ...
    return user_comment, classification, orig_pR, new_pR
  end


  function commands.unlearn(sfid, classification)
    -- classification should be optional here
    ...
    return user_comment, classification, orig_pR, new_pR
  end

  function commands.insert_sfid(msg, sfid)
    -- inserts sfid into references, reply-to, message-id headers
    -- and so on, using util.header_indices
  end


----------------------------------------------------------------


With this kind of structure in place, the spamfilter can look
something like this:

  require 'osbf'

  local util, dirs, commands, cfg = osbf.util, osbf.dirs, osbf.commands,
  osbf.cfg

  ------ deal with options and initialize the system

  local options
  do
    local val, bool = util.options.val, util.options.bool
    local opts = {
      udir = val, gdir = val, learn = val, unlearn = val, classify = bool,
      score = bool, cfgdir = val, dbdir = val, listsdir = val, source = val,
      output = val, help = bool
    }
    options = osbf.getopt(arg, opts)
  end

  util.set_dirs(options) -- should work sensibly with an empty options table
  local config_loaded = osbf.load_config()
  cfg.output = options.output or cfg.output
  util.validate_output(cfg.output)

  local command_line = options.learn or options.unlearn 

  ------- functions to read message and copy to stdout

  local text, emit_text_on_failure -- text of message, wheter to pass through
  local function fail(...)
    if emit_text_on_failure then
      io.write(text)
      io.flush()
    else
      io.stderr:write(...)
      io.stderr:write('\n')
    end
    os.exit(1)
  end


  -- read entire message into var "text"
  if arg[1] then -- check if a filename is given in the command line
    local h, msg = io.open(arg[1], "r")
    if h then 
      text = h:read("*all")
      h:close()
    else
      fail("Error: ", msg, ' (arg[1], ")")
    end
  else
    text = io.read("*all")
    emit_text_on_failure = true
  end

  --- extract command and args from command line or message

  local msg = table_of_msg(text)
  local cmd, cmd_args

  if command_line then -- must be learn or unlearn
    -- fill in the command structure with the command line args and -- flag
    that the message for training comes from stdin assert(options.learn or
    options.unlearn) cmd = options.learn and "learn" or "unlearn" local arg1 =
    { options.learn or options.unlearn } local arg2 = options.source or
    'stdin' if arg2 == 'sfid' then arg2 = nil end --- not sure why this is in
    the original code cmd_args = { arg1, arg2 }
  else
    local subject = util.headers_tagged 'subject' () or ''
    cmd, cmd_args = util.parse_command(subject)
    if not cmd then
      cmd, cmd_args = util.parse_command(string.sub(msg.body, 1, 100))
    end
  end

  cmd = cmd or 'classify' --- default action when no command
  cmd_args = cmd_args or { }

  local reply 


  if commands[cmd] then
    local result, header, body = util.msg_wrap(msg, cmd, cmd_args)
      ... not sure what's happening next, but something is constructed
          and either sent as reply or to stdout ...
      reply = ...
  else
      reply = ... error message about unknown command ...
  end

  ... send reply via sendmail or to stdout or to stderr ...


----------------------------------------------------------------



  function whitelisted(msg) 
    for tag, set in pairs(whitelist.strings) do
      for header in get_header(msg, tag) do
        if set[header] then
          return true
        end
      end
    end
    for tag, set in pairs(whitelist.pats) do
      for header in get_header(msg, tag) do
        for pat in pairs(set) do
          if string.find(header, pat) then
            return true
          end
        end
      end
    end
  end    


Probably the get_header function should strip initial whitespace from
the header...
