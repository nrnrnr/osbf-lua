# We have two sets of configuration
#   - mk.config contains items chosen by the user, such
#     as where we should install.  This info gets pulled
#     in by the ./configure script, or if that's not there,
#     ./configure uses mk.config.defaults
#   - mk.$OS-$ARCH contains items that depend on the operating system 
#     platform.  It is generated by ./configure.

OS:=$(strip $(shell uname))
   # could be more complicated, but let's not worry yet
ARCH:=$(strip $(shell uname -m || echo unknown))

XCFLAGS=-g
  # This variable is meant to be changed on the command line to 
  # enable stuff like -fprofile-arcs or -pg and so on.
  # The value of this variable affects the build directory.

BSUFFIX:=$(strip $(shell echo $(XCFLAGS) | tr -d ' '))
B:=$(strip BUILD-$(OS)-$(ARCH))$(BSUFFIX)

   # build directory
PLATFORM := mk.$(OS)-$(ARCH)

include $(PLATFORM)


MODNAME=$(MOD_NAME)
LIBNAME=$(MODNAME).$(DLEXT)

MAILFILE=$(shell ../mailfile)
    # pathname to a sample mail file (for testing)

##########################################################
#
# list of the sources and their locations

HBASES= oarray.h osbf_disk.h osbfcvt.h osbferr.h osbflib.h
SRCBASES= losbflib.c osbferrl.c oarray.c \
          osbf_bayes.c osbf_aux.c osbf_disk.c osbf_csv.c osbf_stats.c \
          osbf_fmt_5.c osbf_fmt_6.c osbf_fmt_7.c fastmime.c

LOCKNAME=$(shell echo $(LOCK_METHOD) | tr '[:upper:]' '[:lower:]')
LOCKOBJ=osbf_lf_$(LOCKNAME).o

OBJS=$(SRCBASES:%.c=$B/%.o) $(LOCKOBJ:%.o=$B/%.o)
XOBJS=$B/osbferrs.o

CSRCDIR=../src
SRCS=$(SRCBASES:%=$(CSRCDIR)/%)
HFILES=$(HBASES:%=$(CSRCDIR)/%)
LUASRCDIR=../lua

CFLAGS1 = -DOPENFUN=luaopen_$(MODNAME)_core

# -I. below is for config.h
CFLAGS= -Wall -Wextra -Werror -std=c99 -pedantic -fPIC \
        -I$(CSRCDIR) -I. $(CFLAGS1) $(LUA_CFLAGS) $(LUA_DEFINES) \
	-DOSBF_MODNAME=$(MODNAME) -DVERSION='"'$(MOD_VERSION)'"'


$B/%.o: $(CSRCDIR)/%.c $B/depend
	$(CC) $(CFLAGS) $(XCFLAGS) -c -o $@ $(CSRCDIR)/$*.c


.PHONY: all lib distclean mostlyclean clean clobber modname depend
all: lib $B/osbf-lua
lib: $B/$(LIBNAME) $B/fastmime.$(DLEXT)
distclean: 
	rm -f $(PLATFORM)
clobber: clean

.PHONY: build/*

build/%: $B/%

modname:
	-echo "$(MODNAME)"

$(OBJS) $(XOBJS): $(PLATFORM)

mk.$(OS)-ARCH: configure
	sh configure

LIBS=$(LUA_LFLAGS) $(LOCKLIBS) -lm

$B/$(LIBNAME): $(OBJS) $(XOBJS)
	$(CC) $(CFLAGS) $(LD_SHARED_LIB) -o $@ $(OBJS) $(LIBS)

$B/fastmime.$(DLEXT): $B/fastmime.o
	$(CC) $(CFLAGS) $(LD_SHARED_LIB) -o $@ $B/fastmime.o $(LIBS)

$B/osbf-lua: $(OBJS) $B/lua.o $B/main.o # a binary that valgrind understands
	$(CC) $(CFLAGS) $(XCFLAGS)  -o $@ $B/main.o $(OBJS) $B/lua.o \
	  $(LIBDEBUG) $(PGLUALIB) $(PG) $(DL_LIBS) $(REPL_LIBS) $(LIBS) 

$B/mem-test: $B/small.o $B/lua.o $B/main.o
	$(CC) $(CFLAGS) $(XCFLAGS)  -o $@ $^ $(LIBDEBUG) $(PGLUALIB) $(PG) \
	    $(DL_LIBS) $(REPL_LIBS) $(LIBS) 

.PHONY: install install-c install-lua install-bin uninstall test
install: install-c install-lua install-bin
install-c: $B/$(LIBNAME) $B/fastmime.$(DLEXT)
	mkdir -p $(LUA_INSTALL_CMOD)/$(MODNAME)
	cp $B/$(LIBNAME) $(LUA_INSTALL_CMOD)/$(MODNAME)/core.$(DLEXT)
	cp $B/fastmime.$(DLEXT) $(LUA_INSTALL_CMOD)/fastmime.$(DLEXT)
install-lua:
	mkdir -p $(LUA_INSTALL_LMOD)/$(MODNAME)
	cp $(LUASRCDIR)/*.lua $(LUA_INSTALL_LMOD)/$(MODNAME)
	# cp and rm may work where mv will not (directory permissions)
	cp $(LUA_INSTALL_LMOD)/$(MODNAME)/osbf.lua $(LUA_INSTALL_LMOD)/$(MODNAME).lua
	rm $(LUA_INSTALL_LMOD)/$(MODNAME)/osbf.lua

install-bin:
	mkdir -p $(BINDIR)
	echo "#! $(LUABIN)" > $(BINDIR)/$(BIN_NAME)
	sed '/^#!/d' $(LUASRCDIR)/osbf | \
	  $(LUABIN) -e "x=string.gsub(io.read('*a'),'MODNAME','[[$(MODNAME)]]') io.write(x)" \
	  >> $(BINDIR)/$(BIN_NAME)
	chmod +x $(BINDIR)/$(BIN_NAME)

uninstall:
	rm -rf $(LUA_INSTALL_LMOD)/$(MODNAME) $(LUA_INSTALL_LMOD)/$(MODNAME).lua
	rm -rf $(LUA_INSTALL_CMOD)/$(MODNAME) $(LUA_INSTALL_CMOD)/$(MODNAME).lua
	rm -rf $(BINDIR)/$(BIN_NAME)

test: install
	$(LUABIN) -l$(MODNAME) -l$(MODNAME).command_line ../print-contents $(MODNAME)
	$(LUABIN) -l$(MODNAME) -l$(MODNAME).roc < /dev/null
	$(LUABIN) -l$(MODNAME) -l$(MODNAME).mlearn < /dev/null
	$(LUABIN) ../test-headers $(MODNAME) $(MAILFILE)
	$(LUABIN) -l$(MODNAME) -e "m = $(MODNAME).cache.msg_of_any '$(MAILFILE)'; print(m)" -i

mostlyclean:
	rm -f $(LIBNAME) $(OBJS) *.$(DLEXT) *~
	rm -f $B/*.o *.gcda *.gcno *.gcov

clean: mostlyclean
	rm -rf BUILD-*


.PHONY: depend
depend: $B/depend

$B/depend: $(SRCS) $(HFILES) ../strip-lua-headers
	mkdir -p $B
	for c in $(SRCS); do \
	  gcc $(CFLAGS) -MM -MT "$B/`basename $$c .c`.o" $$c ; \
	done | $(LUABIN) ../strip-lua-headers $(LUA_CFLAGS) > $@

include $B/depend
