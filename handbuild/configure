#!/bin/bash

function usage {
  cat <<EOF 1>&2
Usage: `basename $0` [--help] [--sudo]

Options:
    --help   # this help message
    --sudo   # will install with sudo; assume write permissions
EOF
  exit 0
}

sudo=

case $1 in
   --help|-help) usage ;;
   --sudo|-sudo) sudo=true ; shift ;;
   -*) usage ;;
   ?) usage ;;
esac


################################################################
# 
# places to search for things


LIBSEARCH="/usr/lib /usr/lib64 /usr/local/lib /usr/local/lib64"
CCSEARCH="gcc cc"
LUANAMESEARCH="lua5.1 lua"
INCSEARCH="/usr/include /usr/include/lua5.1 /usr/local/include /usr/local/include/lua5.1 /usr/local/lua/include /usr/local/include/lua /usr/include/lua /usr/local/gnu/include"




################################################################
#
# create a temporary file to hold scripts run during configuration

MKTEMP="`which mktemp 2>/dev/null`"
TEMPFILE="`which tempfile 2>/dev/null`"

SCRIPT=
if [ -x "$MKTEMP" ]; then
  SCRIPT="`mktemp 2>/dev/null`"
  [ -z "$SCRIPT" ] && SCRIPT="`mktemp -t 2>/dev/null`"  # Darwin
elif [ -x "$TEMPFILE" ]; then
  SCRIPT="`tempfile`"
fi

if [ -z "$SCRIPT" ]; then
  SCRIPT=/tmp/lua$$ # unsafe but portable
fi

################################################################

OS=`uname`  # could be more complicated, but let's not worry yet
ARCH=`uname -m || echo unknown`

MKCONFIG="mk.$OS-$ARCH"
LOG="configure.log"

echo "DATE='`date`'" > $LOG

function fail {
  echo
  echo "$*" | tee -a $LOG 1>&2
  rm -f $MKCONFIG $SCRIPT
  exit 1
}

function log {
  echo "$*" >> $LOG
}

function warning {
  echo "Warning: $*" | tee -a $LOG 1>&2
}

function warn_writable {
  case $# in
    2) [ -n "$sudo" -o -w "$2" ] || warning "cannot write $1=$2" ;;
    *) fail "Fault in `basename $0`; warn_writable got $# arguments" ;;
  esac
}

function looking-for {
  echo -n "Looking for $*... "
}

function found { 
  echo "$*"
}

log "# creating config file $MKCONFIG"


################################################################

function lib_dir {
  typeset quiet
  case $1 in 
    -quiet) quiet=1 ; shift ;;
  esac

  for dir in $LIBSEARCH; do
    for ext in so a; do
      if [ -r "$dir/lib$1.$ext" ]; then
        [ -z "$quiet" ] && echo "$dir"
        return 0
      fi
    done
  done
  return 1
}

function has_lib {
  lib_dir -quiet "$1"
  return $?
}

################################################################

looking-for C compiler

for CC in $CCSEARCH
do
  [ -x "`which $CC 2>/dev/null`" ] && break
done
[ -x "`which $CC 2>/dev/null`" ] || 
  fail "Cannot find executable C compiler (tried $CCSEARCH)"

log "CC=$CC"
found "$CC"


################################################################
#
# Locate lua binary.  On FreeBSD, take highest installed lua version.
#

looking-for Lua binary

LUABIN=

case $OS in
  FreeBSD)
      VTOP=`ls /usr/local/bin/ | grep 'lua[[:digit:]]' | sort | tail -1`
      LUABIN=/usr/local/bin/$VTOP/lua
      if [ ! -x $LUABIN ]; then
        log "Cannot find a Lua binary in /usr/local/bin/lua*"
      fi
  ;;
esac

if [ ! -x "$LUABIN" ]
then
  # N.B. which's exit code is very broken on solaris
  for bin in $LUANAMESEARCH; do
      if which $bin >/dev/null 2>&1; then
        LUABIN="`which $bin`"
        if [ -n "$LUABIN" -a -x "$LUABIN" ]; then
            break
        else
            LUABIN=
        fi
      fi
  done
  [ -n "$LUABIN" ] || fail "Cannot find a Lua binary using 'which'"
fi

case `$LUABIN -e "print(_VERSION)"` in
  Lua?5.1) ;; # all correct
  *) fail "Found $LUABIN _VERSION is `$LUABIN -e "print(_VERSION)"` but we need 5.1"
esac

log "LUABIN=$LUABIN"

found "$LUABIN"

################################################################

looking-for Lua module installation directories


cat > $SCRIPT <<'EOF'
-- scoring system: prefer /usr/local/ if it is writable
local sudo = arg[1] == 'true'

local function isdir(path)
  local f = io.open(path .. '/.')
  if f then f:close(); return true else return false end
end

local function canwrite(path)
  if sudo then return true end
  local f = io.popen(string.format("[ -w '%s' ] && echo yes || echo no", path))
  if f then
    local answer = f:read()
    f:close()
    return answer:find 'yes' ~= nil
  end
end

local function score(path)
  -- directory 1, writable 2, under /usr +1
  local n = 0
  if isdir(path) then
    n = n + 1
    if canwrite(path) then n = n + 8 end
    if path:find '^/usr' then n = n + 3 end
    if path:find '/lib/' then n = n + 2 end
    if path:find '/lib$' then n = n + 1 end
  end
  -- io.stderr:write(n, ' points for path ', path, '\n')
  return n
end


local cmod, dlext, thescore = nil, nil, 0

for path in package.cpath:gmatch '[^;]+' do
  if path:find '^/' and path:find '/%?%.%a+$' then
    local dir, ext = path:match '^(.*)/%?%.(%a+)$'
    assert(dir and ext)
    if score(dir) > thescore then
      cmod, dlext, thescore = dir, ext, score(dir)
    end
  end
end

local lmod

thescore = 0
for path in package.path:gmatch '[^;]+' do
  if path:find '^/' and path:find '/%?%.lua$' then
    local dir = path:match '^(.*)/%?%.lua$'
    assert(dir)
    if score(dir) > thescore then
      lmod, thescore = dir, score(dir)
    end
  end
end

local function show(name, val)
  if val then io.write(name, '=', val, '\n') end
end

show('DLEXT', dlext)
show('LUA_INSTALL_CMOD', cmod)
show('LUA_INSTALL_LMOD', lmod)
EOF

eval `$LUABIN $SCRIPT "$sudo" || { cat -n $SCRIPT 1>&2; }`
log DLEXT=$DLEXT
log LUA_INSTALL_CMOD="$LUA_INSTALL_CMOD"
log LUA_INSTALL_LMOD="$LUA_INSTALL_LMOD"

################################################################

SPECIALCONFIG=

for i in mk.config.`hostname` mk.config
do
  if [ -r "$i" ]; then
    INCLUDE_MK_CONFIG=yes
    SPECIALCONFIG="$i"
    sed 's/ *= */=/' "$i" > $SCRIPT
    . $SCRIPT
    break
  fi
done
if [ -z "$SPECIALCONFIG" ]; then
  INCLUDE_MK_CONFIG=
  sed 's/ *= */=/' mk.config.defaults | 
  grep -v LUA_INSTALL | grep -vw BINDIR > $SCRIPT
  . $SCRIPT
fi

[ -d "$LUA_INSTALL_CMOD" ] || 
   fail "LUA_INSTALL_CMOD=$LUA_INSTALL_CMOD is not a directory"
warn_writable LUA_INSTALL_CMOD "$LUA_INSTALL_CMOD"

[ -d "$LUA_INSTALL_LMOD" ] ||
   fail "LUA_INSTALL_LMOD=$LUA_INSTALL_LMOD is not a directory"
warn_writable LUA_INSTALL_LMOD "$LUA_INSTALL_LMOD"

found "results:"
echo "  LUA_INSTALL_CMOD=$LUA_INSTALL_CMOD" 
echo "  LUA_INSTALL_LMOD=$LUA_INSTALL_LMOD" 
echo "  DLEXT=$DLEXT"

looking-for Binary installation directory

if [ -z "$BINDIR" ]; then
  for dir in /usr/local/bin /usr/unsup/nr/bin $HOME/bin; do
    [ -d "$dir" -a '(' -n "$sudo" -o -w "$dir" ")" ] && { BINDIR="$dir"; break; }
  done
fi

if [ -z "$BINDIR" ]; then
  xxx="$IFS"
  IFS=":"
  for dir in $PATH; do
    case $dir in
      /*) [ -d "$dir" -a '(' -n "$sudo" -o -w "$dir" ")" ] && { BINDIR="$dir"; break; }
          ;;
    esac
  done
  IFS="$xxx"
fi

[ -z "$BINDIR" ] && 
fail 'The configure script could not find a suitable installation directory.
Please edit a mk.config file and run configure again, or else try
  ./configure --sudo
  make
  sudo make install'

[ -d "$BINDIR" ] || fail "BINDIR=$BINDIR is not a directory"
warn_writable BINDIR "$BINDIR"

log "BINDIR=$BINDIR"

found "$BINDIR"

################################################################
#
# find CFLAGS to pick up lua header files

looking-for CC flags for Lua clients

if pkg-config --cflags lua5.1 > /dev/null 2>/dev/null; then
  LUA_CFLAGS=`pkg-config --cflags lua5.1`
else
  for dir in $INCSEARCH; do
    if [ -r $dir/lua.h -a -r $dir/lauxlib.h ] &&
       grep 'LUA_VERSION.*5\.1' $dir/lua.h > /dev/null
    then
        LUA_CFLAGS="-I$dir"
        break
    fi
  done
fi

log "LUA_CFLAGS=$LUA_CFLAGS"

found "$LUA_CFLAGS"


################################################################
#
# ld options for shared libraries

looking-for ld options to create shared libraries

case $OS in
  Darwin) LD_SHARED_LIB="-bundle -undefined dynamic_lookup" ;;
  *) case "`ld -V -o /dev/null 2>&1`" in
       *Solaris*) # Solaris - tested with 2.6, gcc 2.95.3 20010315 and Solaris ld
                  LD_SHARED_LIB="-G -dy"
                  ;;
       *GNU*) LD_SHARED_LIB="-shared -dy" ;;
       *) fail "Unidentified ld; edit `basename $0`"  ;;
     esac
     ;;
esac

log "LD_SHARED_LIB=$LD_SHARED_LIB"

found "$LD_SHARED_LIB"

################################################################
#
# places to look for lua library

looking-for ld options to link against Lua

if pkg-config --libs lua5.1 > /dev/null 2>/dev/null; then
  LUA_LFLAGS=`pkg-config --libs lua5.1`
else
  if [ -z "$LUALIBDIR" ]; then
    for LUALIBNAME in $LUANAMESEARCH; do
      if has_lib $LUALIBNAME; then
        LUALIBDIR=`lib_dir $LUALIBNAME`
        break
      fi
    done 
  fi

  [ -n "$LUALIBDIR" ] || fail "Cannot find lua library to link against"

  LUA_LFLAGS="-L$LUALIBDIR -l$LUALIBNAME"
fi
log "LUA_LFLAGS=$LUA_LFLAGS"

found "LUA_LFLAGS=$LUA_LFLAGS"

################################################################
#
# Locking method for databases: LOCKFILE, FCNTL or NONE

looking-for file-locking method

if [ -z "$LOCK_METHOD" ]; then
  if [ -r /usr/include/lockfile.h ] && has_lib lockfile; then
    LOCK_METHOD=LOCKFILE
    LOCKLIBS="-L`lib_dir lockfile` -llockfile"
  else
    LOCKLIBS=
  fi

  FCNTL="/usr/include/fcntl.h /usr/include/*/fcntl.h"
  if [ -z "$LOCK_METHOD" ] && grep -w F_SETLK $FCNTL >/dev/null 2>/dev/null; then
    LOCK_METHOD=FCNTL
  fi

  [ -n "$LOCK_METHOD" ] || LOCK_METHOD=NONE
fi

log "LOCK_METHOD=$LOCK_METHOD"
log "LOCKLIBS=$LOCKLIBS"

what="$LOCK_METHOD"
[ -n "$LOCKLIBS" ] && what="$what (ld options $LOCKLIBS)"
found "$what"

################################################################

looking-for compile-time Lua configuration

LUACONF=
case $OS in
  Darwin) LUACONF="-DLUA_USE_MACOSX" ;;
  Linux)  
     if has_lib readline && has_lib history && has_lib ncurses; then
       LUACONF="-DLUA_USE_LINUX"
       REPL_LIBS="-lreadline -lhistory -lncurses"
     else
       LUACONF="-DLUA_USE_POSIX -DLUA_USE_DLOPEN"
       REPL_LIBS=
     fi ;;
  *) LUACONF= ;;
esac

log "LUACONF=$LUACONF"

found "$LUACONF"

################################################################

looking-for libraries needed for "dlopen()"

case $OS in
  *BSD*) DL_LIBS= ;;
  *) DL_LIBS=-ldl ;;
esac

found "$DL_LIBS"

################################################################

echo -n "Writing $MKCONFIG... "

cat <<'EOF' > $MKCONFIG
# this file is generated automatically by ./configure
# it can by used both by Andrew Hume's mk and by GNU Make
#
# in order not to confuse GNU Make, no assignment is ever
# followed by a comment on the same line
#
# in order not to confuse mk, comments start in column 1
#
EOF

if [ -z "$INCLUDE_MK_CONFIG" ]; then

cat > $MKCONFIG <<EOF
MOD_NAME         = $MOD_NAME
BIN_NAME         = $BIN_NAME
BINDIR           = $BINDIR
MOD_VERSION      = 3.0.0
EOF

else

  sed 's/[ 	]*#.*//' "$SPECIALCONFIG" > $MKCONFIG

fi

cat >> $MKCONFIG <<EOF
# CC is the local C compiler
CC     = $CC       
# DLEXT is the extension used by Lua to load C modules
DLEXT  = $DLEXT
# LUABIN is the path to the Lua binary
LUABIN = $LUABIN

# LUA_INSTALL_CMOD is where $LUABIN looks for C modules
LUA_INSTALL_CMOD = $LUA_INSTALL_CMOD
# LUA_INSTALL_LMOD is where $LUABIN looks for Lua modules
LUA_INSTALL_LMOD = $LUA_INSTALL_LMOD


#
# lock methods: NONE, LOCKFILE, FCNTL
#    NONE     - no locking
#    LOCKFILE - liblockfile
#    FCNTL    - fcntl(F_SETLK, ...)

LOCK_METHOD      = $LOCK_METHOD
LUA_DEFINES      = $LUACONF
LUA_CFLAGS       = $LUA_CFLAGS
LUA_LFLAGS       = $LUA_LFLAGS
LOCKLIBS         = $LOCKLIBS
REPL_LIBS        = $REPL_LIBS

DL_LIBS          = $DL_LIBS
# libraries needed to be able to call dlopen()

LD_SHARED_LIB    = $LD_SHARED_LIB           
# options needed to create dynamically linkable code
EOF


echo done

rm -f $SCRIPT
