# We have two sets of configuration
#   - mk.config contains items chosen by the user, such
#     as where we should install.  By default it simply
#     uses mk.config.defaults
#   - mk.$OS contains items that depend on the operating system 
#     platform.  We hope one day that mk.$OS will be generated
#     automatically.

OS=`uname`  # could be more complicated, but let's not worry yet
ARCH=`uname -m || echo unknown`
B=BUILD-$OS-$ARCH   # build directory

<mk.config
<mk.$OS


MODNAME=$MOD_NAME
LIBNAME=$MODNAME.$DLEXT

MAILFILE=`../mailfile`  # pathname to a sample mail file (for testing)

##########################################################
#
# list of the sources and their locations

HBASES= oarray.h osbf_disk.h osbfcvt.h osbferr.h osbflib.h
SRCBASES= losbflib.c osbferrl.c oarray.c \
      osbf_bayes.c osbf_aux.c osbf_disk.c osbf_csv.c osbf_stats.c \
      osbf_fmt_5.c osbf_fmt_6.c osbf_fmt_7.c fastmime.c

LOCKNAME=`echo $LOCK_METHOD | tr '[:upper:]' '[:lower:]'`
LOCKOBJ=osbf_lf_$LOCKNAME.o

OBJS=${SRCBASES:%.c=$B/%.o} ${LOCKOBJ:%.o=$B/%.o}
XOBJS=$B/osbferrs.o

CSRCDIR=../src
SRCS=${SRCBASES:%=$CSRCDIR/%}
HFILES=${HBASES:%=$CSRCDIR/%}
LUASRCDIR=../lua

CFLAGS1 = -DOPENFUN=luaopen_${MODNAME}_core
XCFLAGS=-g

# -I. below is for config.h
CFLAGS= -Wall -Wextra -Werror -std=c99 -pedantic \
        -I$CSRCDIR -I. $CFLAGS1 $LUA_CFLAGS $LUA_DEFINES \
	-DOSBF_MODNAME=$MODNAME -DVERSION='"'$MOD_VERSION'"'


$B/&.o: $CSRCDIR/&.c $B/depend
	$CC $CFLAGS $XCFLAGS -c -o $target $CSRCDIR/$stem.c


all:V: lib $B/osbf-lua
lib:V: $B/$LIBNAME $B/fastmime.$DLEXT
distclean:V: clobber
clobber:V: clean
	rm -rf $B

modname:VQ:
	echo "$MODNAME"

$OBJS $XOBJS: mk.config mk.$OS

LIBS=$LUA_LFLAGS $LOCKLIBS -lm

$B/$LIBNAME: $OBJS $XOBJS
	$CC $CFLAGS $LD_SHARED_LIB -o $target $OBJS $LIBS

$B/fastmime.$DLEXT: $B/fastmime.o
	$CC $CFLAGS $LD_SHARED_LIB -o $target $B/fastmime.o $LIBS

$B/osbf-lua: $OBJS $B/lua.o $B/main.o # a binary that valgrind understands
	$CC $CFLAGS  -o $target $B/main.o $OBJS $B/lua.o \
            $LIBDEBUG $PGLUALIB $PG $DL_LIBS $REPL_LIBS $LIBS 

$B/mem-test: $B/small.o $B/lua.o $B/main.o
	$CC $CFLAGS  -o $target $prereq $LIBDEBUG $PGLUALIB $PG \
	    $DL_LIBS $REPL_LIBS $LIBS 

install:V: install-c install-lua install-bin
install-c:V: $B/$LIBNAME $B/fastmime.$DLEXT
	mkdir -p $LUA_INSTALL_CMOD/$MODNAME
	cp $B/$LIBNAME $LUA_INSTALL_CMOD/$MODNAME/core.$DLEXT
	cp $B/fastmime.$DLEXT $LUA_INSTALL_CMOD/fastmime.$DLEXT
install-lua:V:
	mkdir -p $LUA_INSTALL_LMOD/$MODNAME
	cp $LUASRCDIR/*.lua $LUA_INSTALL_LMOD/$MODNAME
	# cp and rm may work where mv will not (directory permissions)
	cp $LUA_INSTALL_LMOD/$MODNAME/osbf.lua $LUA_INSTALL_LMOD/$MODNAME.lua
	rm $LUA_INSTALL_LMOD/$MODNAME/osbf.lua

install-bin:V:
	mkdir -p $BINDIR
	echo "#! $LUABIN" > $BINDIR/$BIN_NAME
	sed '/^#!/d' $LUASRCDIR/osbf |
	  lua -e "x=string.gsub(io.read('*a'),'MODNAME','[[$MODNAME]]') io.write(x)" \
              >> $BINDIR/$BIN_NAME
	chmod +x $BINDIR/$BIN_NAME

uninstall:V:
	rm -rf $LUA_INSTALL_LMOD/$MODNAME $LUA_INSTALL_LMOD/$MODNAME.lua
	rm -rf $LUA_INSTALL_CMOD/$MODNAME $LUA_INSTALL_CMOD/$MODNAME.lua
	rm -rf $BINDIR/$BIN_NAME

test:V: install
	$LUABIN -l$MODNAME -l$MODNAME.command_line ../print-contents $MODNAME
	$LUABIN -l$MODNAME -l$MODNAME.roc < /dev/null
	$LUABIN -l$MODNAME -l$MODNAME.mlearn < /dev/null
	$LUABIN ../test-headers $MODNAME $MAILFILE
	$LUABIN -l$MODNAME -e "m = $MODNAME.cache.msg_of_any '$MAILFILE'; print(m)" -i

clean:V:
	rm -f $LIBNAME $OBJS *.$DLEXT *~
	rm -f $B/*.o *.gcda *.gcno


depend:V: $B/depend

$B/depend: $SRCS $HFILES ../strip-lua-headers
	mkdir -p $B
	for c in $SRCS
	do
	  gcc $CFLAGS -MM -MT "$B/`basename $c .c`.o" $c
	done | lua ../strip-lua-headers $LUA_CFLAGS > $target

<$B/depend
