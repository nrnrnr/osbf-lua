#! /usr/bin/env lua5.1
--  -*- mode: lua -*-

local osbf         = require 'osbf3'
local command_line = require 'osbf3.command_line'
local options      = require 'osbf3.options'
local util         = require 'osbf3.util'
local commands     = require 'osbf3.commands'
local msg          = require 'osbf3.msg'
local cfg          = require 'osbf3.cfg'
local cache        = require 'osbf3.cache'
local roc          = require 'osbf3.roc'


local md5sum = false -- compute md5 sums of databases
local md5run = md5sum and os.execute or function() end

options.register { long = 'buckets', type = options.std.val, 
                   usage = '-buckets <number>|small|large' }

options.register { long = 'max', type = options.std.num, usage = '-max <number>' }

options.register { long = 'o', type = options.std.val, usage = '-o <outfile>' }

options.register { long = 'keep', type = options.std.bool, help = 'keep temporary directory and files' }

options.register { long = 'ctimes', type = options.std.bool, help = 'compute classification rate without training' }

local opts, args  = options.parse(arg)

local debug = os.getenv 'OSBF_DEBUG'

local trecdir = args[1] 
if not trecdir then
  print('Usage: trec.lua [-ctimes] [-buckets <number>|small|large] [-max <n>] [-keep] [-o outfile] <trec_index_dir>')
  os.exit(1)
end
trecdir = util.append_slash(trecdir)

function os.capture(cmd, raw)
  local f, msg = io.popen(cmd, 'r')
  if not f then return nil, msg end
  local s = assert(f:read('*a'))
  f:close()
  if raw then return s end
  s = string.gsub(s, '^%s+', '')
  s = string.gsub(s, '%s+$', '')
  s = string.gsub(s, '[\n\r]+', ' ')
  return s
end



local image = util.image

-- try to avoid collisions on multiple tests
local test_dir = os.capture 'tempfile -p osbf-' or '/tmp/osbf-lua'
os.execute('/bin/rm -rf ' .. test_dir)
os.execute('/bin/mkdir ' .. test_dir)

opts.udir = test_dir

osbf.init(opts, true)

local bucket_sizes = { small = 94321, large = 4000037, trec = 4000037 }

local num_buckets =
  opts.buckets and (assert(bucket_sizes[opts.buckets] or tonumber(opts.buckets)))
  or 94321

local email = 'test@test'
commands.init(email, num_buckets, 'buckets')

cfg.text_limit = 500000

local opcall = pcall
pcall = function(f, ...) return true, f(...) end
osbf.command_line.pcall = pcall
opcall = pcall

local outfilename = opts.o or 'result.lua'

local result = outfilename == '-' and io.stdout or assert(io.open(outfilename, 'w'))

local using_cache = false

local max_lines = opts.max or 5000
local learnings = 0
local start_time = os.time()
local files = { }
local classifications = { }
if md5sum then os.remove(test_dir .. '/md5sums') end
result:write 'return {'
for l in assert(io.lines(trecdir .. 'index')) do
  md5run('md5sum ' .. test_dir .. '/*.cfc >> ' .. test_dir .. '/md5sums')
  local labelled, file = string.match(l, '^(%w+)%s+(.*)')
  if debug then io.stderr:write("\nMsg ", file) end 
  table.insert(files, file)
  local m = msg.of_file(trecdir .. file)
  local probs, scores = commands.multiclassify(m.lim.msg)
  local cfn = { actual = labelled, scores = scores, file = file }
  table.insert(classifications, cfn)
  local class = roc.most_likely_class(cfn)
  local train = scores[class] < cfg.classes[class].train_below
  if train or class ~= labelled then
    local ok, errmsg = opcall(commands.learn_msg, m, labelled)
    if ok then
      learnings = learnings + 1
    else
      io.stderr:write(errmsg, '\n')
    end
  end

  result:write(image(cfn, '  '), ',\n')
  if #classifications >= max_lines then break end
end
local end_time = os.time()
result:write('}\n')

local nclass = #classifications

function info(...)
  local s = string.format(...)
  result:write('-- ', s, '\n')
  io.stderr:write(s, '\n')
end
  

info('Using %d buckets, %d classifications (%.1f/s) require %d learnings',
  num_buckets, nclass, (nclass / os.difftime(end_time, start_time)), learnings)

local ROCA_fmt = '%9.9s: 1-ROCA%% = %0.6f'

for _, class in ipairs(cfg.classlist()) do
  local curve = roc.curve(class, classifications)
  local above = roc.area_above(curve)
  info(ROCA_fmt, class, 100 * above)
  local jgraph = io.open(outfilename .. '-' .. class .. '.j', 'w')
  jgraph:write('newgraph\n')
  roc.jgraph(jgraph, curve)
  jgraph:close()
end

local above = roc.area_above_hand_till(cfg.classlist(), classifications)
info(ROCA_fmt, 'Hand-Till', 100 * above)

if opts.ctimes then
  local start_time = os.time()
  for _, file in ipairs(files) do
    local m = msg.of_any(trecdir .. file)
    commands.classify(m)
  end
  local end_time = os.time()
  local sec = os.difftime(end_time, start_time)
  info('Without training, %d classifications (%.1f/s) in %d:%02d',
    nclass, (nclass / sec), math.floor(sec / 60), sec % 60)
end




if result ~= io.stdout then
  result:close()
end

if not opts.keep then
  os.execute('/bin/rm -rf ' .. test_dir)
end

